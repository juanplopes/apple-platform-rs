```
$ rcodesign generate-self-signed-certificate --help
Generate a self-signed certificate for code signing

This command will generate a new key pair using the algorithm of choice then create an X.509 certificate wrapper for it that is signed with the just-generated private key. The created X.509 certificate has extensions that mark it as appropriate for code signing.

Certificates generated with this command can be useful for local testing. However, because it is a self-signed certificate and isn't signed by a trusted certificate authority, Apple operating systems may refuse to load binaries signed with it.

By default the command prints 2 PEM encoded blocks. One block is for the X.509 public certificate. The other is for the PKCS#8 private key (which can include the public key).

The `--pem-filename` argument can be specified to write the generated certificate pair to a pair of files. The destination files will have `.crt` and `.key` appended to the value provided.

When the certificate is written to a file, it isn't printed to stdout.

Usage: rcodesign generate-self-signed-certificate [OPTIONS]

Options:
  -C, --config-file <CONFIG_PATH>
          Explicit configuration file to load.
          
          If provided, the default configuration files are not loaded, even if they exist.
          
          Can be specified multiple times. Files are loaded/merged in the order given.
          
          The special value `/dev/null` can be used to specify an empty/null config file. It can be used to short-circuit loading of default config files.

      --csr-pem-file <CSR_PEM_PATH>
          Path to file to write PEM encoded CSR to

  -P, --profile <PROFILE>
          Configuration profile to load.
          
          If not specified, the implicit "default" profile is loaded.

      --smartcard-slot <SLOT>
          Smartcard slot number of signing certificate to use (9c is common)

      --smartcard-pin <SECRET>
          Smartcard PIN used to unlock certificate
          
          If not provided, you will be prompted for a PIN as necessary.

  -v, --verbose...
          Increase logging verbosity. Can be specified multiple times

      --smartcard-pin-env <STRING>
          Environment variable holding the smartcard PIN

      --keychain-domain <DOMAIN>
          (macOS only) Keychain domain to operate on
          
          [possible values: user, system, common, dynamic]

      --keychain-fingerprint <SHA256 FINGERPRINT>
          (macOS only) SHA-256 fingerprint of certificate in Keychain to use

      --windows-store-name <STORE>
          (Windows only) Windows Store to operate on
          
          [possible values: user, machine, service]

      --windows-store-sha1-fingerprint <SHA1 FINGERPRINT>
          (Windows only) SHA-1 fingerprint of certificate in Windows Store to use

      --pem-file <PATH>
          Path to file containing PEM encoded certificate/key data

      --p12-file <PATH>
          Path to a .p12/PFX file containing a certificate key pair

      --p12-password <SECRET>
          The password to use to open the --p12-file file

      --p12-password-file <PATH>
          Path to file containing password for opening --p12-file file

      --remote-signing-url <URL>
          URL of a remote code signing server

      --remote-public-key <BASE64 ENCODED PUBLIC KEY>
          Base64 encoded public key data describing the signer

      --remote-public-key-pem-file <PATH>
          PEM encoded public key data describing the signer

      --remote-shared-secret <SECRET>
          Shared secret used for remote signing

      --remote-shared-secret-env <ENV VAR NAME>
          Environment variable holding the shared secret used for remote signing

      --certificate-der-file <PATH>
          Path to file containing DER encoded certificate data

  -h, --help
          Print help (see a summary with '-h')

```

```
$ rcodesign generate-self-signed-certificate --profile apple-development --person-name 'Johnny Apple'
? 2
error: unexpected argument '--person-name' found

Usage: rcodesign generate-self-signed-certificate --profile <PROFILE>

For more information, try '--help'.

```

Try a PKCS#12 file

```
$ rcodesign generate-self-signed-certificate --profile apple-development --person-name 'Johnny Apple' --p12-file test.p12 --p12-password password
? 2
error: unexpected argument '--person-name' found

Usage: rcodesign generate-self-signed-certificate --profile <PROFILE>

For more information, try '--help'.

```
